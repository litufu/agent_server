// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  location: (where?: LocationWhereInput) => Promise<boolean>;
  school: (where?: SchoolWhereInput) => Promise<boolean>;
  statistic: (where?: StatisticWhereInput) => Promise<boolean>;
  student: (where?: StudentWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  location: (where: LocationWhereUniqueInput) => LocationNullablePromise;
  locations: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Location>;
  locationsConnection: (args?: {
    where?: LocationWhereInput;
    orderBy?: LocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LocationConnectionPromise;
  school: (where: SchoolWhereUniqueInput) => SchoolNullablePromise;
  schools: (args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<School>;
  schoolsConnection: (args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SchoolConnectionPromise;
  statistic: (where: StatisticWhereUniqueInput) => StatisticNullablePromise;
  statistics: (args?: {
    where?: StatisticWhereInput;
    orderBy?: StatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Statistic>;
  statisticsConnection: (args?: {
    where?: StatisticWhereInput;
    orderBy?: StatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StatisticConnectionPromise;
  student: (where: StudentWhereUniqueInput) => StudentNullablePromise;
  students: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Student>;
  studentsConnection: (args?: {
    where?: StudentWhereInput;
    orderBy?: StudentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => StudentConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createLocation: (data: LocationCreateInput) => LocationPromise;
  updateLocation: (args: {
    data: LocationUpdateInput;
    where: LocationWhereUniqueInput;
  }) => LocationPromise;
  updateManyLocations: (args: {
    data: LocationUpdateManyMutationInput;
    where?: LocationWhereInput;
  }) => BatchPayloadPromise;
  upsertLocation: (args: {
    where: LocationWhereUniqueInput;
    create: LocationCreateInput;
    update: LocationUpdateInput;
  }) => LocationPromise;
  deleteLocation: (where: LocationWhereUniqueInput) => LocationPromise;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayloadPromise;
  createSchool: (data: SchoolCreateInput) => SchoolPromise;
  updateSchool: (args: {
    data: SchoolUpdateInput;
    where: SchoolWhereUniqueInput;
  }) => SchoolPromise;
  updateManySchools: (args: {
    data: SchoolUpdateManyMutationInput;
    where?: SchoolWhereInput;
  }) => BatchPayloadPromise;
  upsertSchool: (args: {
    where: SchoolWhereUniqueInput;
    create: SchoolCreateInput;
    update: SchoolUpdateInput;
  }) => SchoolPromise;
  deleteSchool: (where: SchoolWhereUniqueInput) => SchoolPromise;
  deleteManySchools: (where?: SchoolWhereInput) => BatchPayloadPromise;
  createStatistic: (data: StatisticCreateInput) => StatisticPromise;
  updateStatistic: (args: {
    data: StatisticUpdateInput;
    where: StatisticWhereUniqueInput;
  }) => StatisticPromise;
  updateManyStatistics: (args: {
    data: StatisticUpdateManyMutationInput;
    where?: StatisticWhereInput;
  }) => BatchPayloadPromise;
  upsertStatistic: (args: {
    where: StatisticWhereUniqueInput;
    create: StatisticCreateInput;
    update: StatisticUpdateInput;
  }) => StatisticPromise;
  deleteStatistic: (where: StatisticWhereUniqueInput) => StatisticPromise;
  deleteManyStatistics: (where?: StatisticWhereInput) => BatchPayloadPromise;
  createStudent: (data: StudentCreateInput) => StudentPromise;
  updateStudent: (args: {
    data: StudentUpdateInput;
    where: StudentWhereUniqueInput;
  }) => StudentPromise;
  updateManyStudents: (args: {
    data: StudentUpdateManyMutationInput;
    where?: StudentWhereInput;
  }) => BatchPayloadPromise;
  upsertStudent: (args: {
    where: StudentWhereUniqueInput;
    create: StudentCreateInput;
    update: StudentUpdateInput;
  }) => StudentPromise;
  deleteStudent: (where: StudentWhereUniqueInput) => StudentPromise;
  deleteManyStudents: (where?: StudentWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  school: (
    where?: SchoolSubscriptionWhereInput
  ) => SchoolSubscriptionPayloadSubscription;
  statistic: (
    where?: StatisticSubscriptionWhereInput
  ) => StatisticSubscriptionPayloadSubscription;
  student: (
    where?: StudentSubscriptionWhereInput
  ) => StudentSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SchoolOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "code_ASC"
  | "code_DESC"
  | "hasAgent_ASC"
  | "hasAgent_DESC";

export type StatisticOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "studentsNum_ASC"
  | "studentsNum_DESC"
  | "validNum_ASC"
  | "validNum_DESC"
  | "settlement_ASC"
  | "settlement_DESC";

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC";

export type StudentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "schoolName_ASC"
  | "schoolName_DESC"
  | "locationCode_ASC"
  | "locationCode_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "accountType_ASC"
  | "accountType_DESC"
  | "account_ASC"
  | "account_DESC"
  | "createTime_ASC"
  | "createTime_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserUpdateWithoutSchoolDataInput {
  name?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  accountType?: Maybe<String>;
  account?: Maybe<String>;
  statistics?: Maybe<StatisticUpdateManyWithoutUserInput>;
  createTime?: Maybe<DateTimeInput>;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
  name?: Maybe<String>;
}>;

export interface SchoolCreateWithoutLocationInput {
  id?: Maybe<ID_Input>;
  name: String;
  code: String;
  hasAgent: Boolean;
  user?: Maybe<UserCreateOneWithoutSchoolInput>;
}

export interface SchoolUpdateInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutSchoolInput>;
  location?: Maybe<LocationUpdateOneWithoutSchoolsInput>;
}

export interface UserCreateOneWithoutSchoolInput {
  create?: Maybe<UserCreateWithoutSchoolInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SchoolUpdateOneInput {
  create?: Maybe<SchoolCreateInput>;
  update?: Maybe<SchoolUpdateDataInput>;
  upsert?: Maybe<SchoolUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface UserCreateWithoutSchoolInput {
  id?: Maybe<ID_Input>;
  name: String;
  username: String;
  password: String;
  accountType: String;
  account: String;
  statistics?: Maybe<StatisticCreateManyWithoutUserInput>;
  createTime?: Maybe<DateTimeInput>;
}

export interface StatisticWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  school?: Maybe<SchoolWhereInput>;
  studentsNum?: Maybe<Int>;
  studentsNum_not?: Maybe<Int>;
  studentsNum_in?: Maybe<Int[] | Int>;
  studentsNum_not_in?: Maybe<Int[] | Int>;
  studentsNum_lt?: Maybe<Int>;
  studentsNum_lte?: Maybe<Int>;
  studentsNum_gt?: Maybe<Int>;
  studentsNum_gte?: Maybe<Int>;
  validNum?: Maybe<Int>;
  validNum_not?: Maybe<Int>;
  validNum_in?: Maybe<Int[] | Int>;
  validNum_not_in?: Maybe<Int[] | Int>;
  validNum_lt?: Maybe<Int>;
  validNum_lte?: Maybe<Int>;
  validNum_gt?: Maybe<Int>;
  validNum_gte?: Maybe<Int>;
  user?: Maybe<UserWhereInput>;
  settlement?: Maybe<Boolean>;
  settlement_not?: Maybe<Boolean>;
  AND?: Maybe<StatisticWhereInput[] | StatisticWhereInput>;
  OR?: Maybe<StatisticWhereInput[] | StatisticWhereInput>;
  NOT?: Maybe<StatisticWhereInput[] | StatisticWhereInput>;
}

export interface StatisticCreateManyWithoutUserInput {
  create?: Maybe<
    StatisticCreateWithoutUserInput[] | StatisticCreateWithoutUserInput
  >;
  connect?: Maybe<StatisticWhereUniqueInput[] | StatisticWhereUniqueInput>;
}

export interface StudentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StudentWhereInput>;
  AND?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  OR?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
  NOT?: Maybe<StudentSubscriptionWhereInput[] | StudentSubscriptionWhereInput>;
}

export interface StatisticCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  school?: Maybe<SchoolCreateOneInput>;
  studentsNum: Int;
  validNum: Int;
  settlement?: Maybe<Boolean>;
}

export interface StatisticSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<StatisticWhereInput>;
  AND?: Maybe<
    StatisticSubscriptionWhereInput[] | StatisticSubscriptionWhereInput
  >;
  OR?: Maybe<
    StatisticSubscriptionWhereInput[] | StatisticSubscriptionWhereInput
  >;
  NOT?: Maybe<
    StatisticSubscriptionWhereInput[] | StatisticSubscriptionWhereInput
  >;
}

export interface SchoolCreateOneInput {
  create?: Maybe<SchoolCreateInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LocationWhereInput>;
  AND?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
  OR?: Maybe<LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput>;
  NOT?: Maybe<
    LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  >;
}

export interface SchoolCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  code: String;
  hasAgent: Boolean;
  user?: Maybe<UserCreateOneWithoutSchoolInput>;
  location?: Maybe<LocationCreateOneWithoutSchoolsInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  accountType?: Maybe<String>;
  account?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneRequiredWithoutUserInput>;
  statistics?: Maybe<StatisticUpdateManyWithoutUserInput>;
  createTime?: Maybe<DateTimeInput>;
}

export interface LocationCreateOneWithoutSchoolsInput {
  create?: Maybe<LocationCreateWithoutSchoolsInput>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export type SchoolWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export interface LocationCreateWithoutSchoolsInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
}

export interface StudentUpdateInput {
  userId?: Maybe<String>;
  schoolName?: Maybe<String>;
  locationCode?: Maybe<String>;
}

export interface LocationUpdateInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  schools?: Maybe<SchoolUpdateManyWithoutLocationInput>;
}

export type StatisticWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SchoolUpdateManyWithoutLocationInput {
  create?: Maybe<
    SchoolCreateWithoutLocationInput[] | SchoolCreateWithoutLocationInput
  >;
  delete?: Maybe<SchoolWhereUniqueInput[] | SchoolWhereUniqueInput>;
  connect?: Maybe<SchoolWhereUniqueInput[] | SchoolWhereUniqueInput>;
  set?: Maybe<SchoolWhereUniqueInput[] | SchoolWhereUniqueInput>;
  disconnect?: Maybe<SchoolWhereUniqueInput[] | SchoolWhereUniqueInput>;
  update?: Maybe<
    | SchoolUpdateWithWhereUniqueWithoutLocationInput[]
    | SchoolUpdateWithWhereUniqueWithoutLocationInput
  >;
  upsert?: Maybe<
    | SchoolUpsertWithWhereUniqueWithoutLocationInput[]
    | SchoolUpsertWithWhereUniqueWithoutLocationInput
  >;
  deleteMany?: Maybe<SchoolScalarWhereInput[] | SchoolScalarWhereInput>;
  updateMany?: Maybe<
    | SchoolUpdateManyWithWhereNestedInput[]
    | SchoolUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpsertWithoutStatisticsInput {
  update: UserUpdateWithoutStatisticsDataInput;
  create: UserCreateWithoutStatisticsInput;
}

export interface SchoolUpdateWithWhereUniqueWithoutLocationInput {
  where: SchoolWhereUniqueInput;
  data: SchoolUpdateWithoutLocationDataInput;
}

export type StudentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userId?: Maybe<String>;
}>;

export interface SchoolUpdateWithoutLocationDataInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutSchoolInput>;
}

export interface StudentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  schoolName?: Maybe<String>;
  schoolName_not?: Maybe<String>;
  schoolName_in?: Maybe<String[] | String>;
  schoolName_not_in?: Maybe<String[] | String>;
  schoolName_lt?: Maybe<String>;
  schoolName_lte?: Maybe<String>;
  schoolName_gt?: Maybe<String>;
  schoolName_gte?: Maybe<String>;
  schoolName_contains?: Maybe<String>;
  schoolName_not_contains?: Maybe<String>;
  schoolName_starts_with?: Maybe<String>;
  schoolName_not_starts_with?: Maybe<String>;
  schoolName_ends_with?: Maybe<String>;
  schoolName_not_ends_with?: Maybe<String>;
  locationCode?: Maybe<String>;
  locationCode_not?: Maybe<String>;
  locationCode_in?: Maybe<String[] | String>;
  locationCode_not_in?: Maybe<String[] | String>;
  locationCode_lt?: Maybe<String>;
  locationCode_lte?: Maybe<String>;
  locationCode_gt?: Maybe<String>;
  locationCode_gte?: Maybe<String>;
  locationCode_contains?: Maybe<String>;
  locationCode_not_contains?: Maybe<String>;
  locationCode_starts_with?: Maybe<String>;
  locationCode_not_starts_with?: Maybe<String>;
  locationCode_ends_with?: Maybe<String>;
  locationCode_not_ends_with?: Maybe<String>;
  AND?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  OR?: Maybe<StudentWhereInput[] | StudentWhereInput>;
  NOT?: Maybe<StudentWhereInput[] | StudentWhereInput>;
}

export interface UserUpdateOneWithoutSchoolInput {
  create?: Maybe<UserCreateWithoutSchoolInput>;
  update?: Maybe<UserUpdateWithoutSchoolDataInput>;
  upsert?: Maybe<UserUpsertWithoutSchoolInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SchoolUpdateOneRequiredWithoutUserInput {
  create?: Maybe<SchoolCreateWithoutUserInput>;
  update?: Maybe<SchoolUpdateWithoutUserDataInput>;
  upsert?: Maybe<SchoolUpsertWithoutUserInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface UserCreateOneWithoutStatisticsInput {
  create?: Maybe<UserCreateWithoutStatisticsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateOneWithoutStatisticsInput {
  create?: Maybe<UserCreateWithoutStatisticsInput>;
  update?: Maybe<UserUpdateWithoutStatisticsDataInput>;
  upsert?: Maybe<UserUpsertWithoutStatisticsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface StatisticUpdateManyWithoutUserInput {
  create?: Maybe<
    StatisticCreateWithoutUserInput[] | StatisticCreateWithoutUserInput
  >;
  delete?: Maybe<StatisticWhereUniqueInput[] | StatisticWhereUniqueInput>;
  connect?: Maybe<StatisticWhereUniqueInput[] | StatisticWhereUniqueInput>;
  set?: Maybe<StatisticWhereUniqueInput[] | StatisticWhereUniqueInput>;
  disconnect?: Maybe<StatisticWhereUniqueInput[] | StatisticWhereUniqueInput>;
  update?: Maybe<
    | StatisticUpdateWithWhereUniqueWithoutUserInput[]
    | StatisticUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | StatisticUpsertWithWhereUniqueWithoutUserInput[]
    | StatisticUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<StatisticScalarWhereInput[] | StatisticScalarWhereInput>;
  updateMany?: Maybe<
    | StatisticUpdateManyWithWhereNestedInput[]
    | StatisticUpdateManyWithWhereNestedInput
  >;
}

export interface StatisticUpdateInput {
  date?: Maybe<DateTimeInput>;
  school?: Maybe<SchoolUpdateOneInput>;
  studentsNum?: Maybe<Int>;
  validNum?: Maybe<Int>;
  user?: Maybe<UserUpdateOneWithoutStatisticsInput>;
  settlement?: Maybe<Boolean>;
}

export interface StatisticUpdateWithWhereUniqueWithoutUserInput {
  where: StatisticWhereUniqueInput;
  data: StatisticUpdateWithoutUserDataInput;
}

export interface SchoolCreateOneWithoutUserInput {
  create?: Maybe<SchoolCreateWithoutUserInput>;
  connect?: Maybe<SchoolWhereUniqueInput>;
}

export interface StatisticUpdateWithoutUserDataInput {
  date?: Maybe<DateTimeInput>;
  school?: Maybe<SchoolUpdateOneInput>;
  studentsNum?: Maybe<Int>;
  validNum?: Maybe<Int>;
  settlement?: Maybe<Boolean>;
}

export interface SchoolCreateManyWithoutLocationInput {
  create?: Maybe<
    SchoolCreateWithoutLocationInput[] | SchoolCreateWithoutLocationInput
  >;
  connect?: Maybe<SchoolWhereUniqueInput[] | SchoolWhereUniqueInput>;
}

export interface StatisticCreateInput {
  id?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  school?: Maybe<SchoolCreateOneInput>;
  studentsNum: Int;
  validNum: Int;
  user?: Maybe<UserCreateOneWithoutStatisticsInput>;
  settlement?: Maybe<Boolean>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface SchoolUpdateDataInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
  user?: Maybe<UserUpdateOneWithoutSchoolInput>;
  location?: Maybe<LocationUpdateOneWithoutSchoolsInput>;
}

export interface SchoolSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SchoolWhereInput>;
  AND?: Maybe<SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput>;
  OR?: Maybe<SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput>;
  NOT?: Maybe<SchoolSubscriptionWhereInput[] | SchoolSubscriptionWhereInput>;
}

export interface LocationUpdateOneWithoutSchoolsInput {
  create?: Maybe<LocationCreateWithoutSchoolsInput>;
  update?: Maybe<LocationUpdateWithoutSchoolsDataInput>;
  upsert?: Maybe<LocationUpsertWithoutSchoolsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<LocationWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  username: String;
  password: String;
  accountType: String;
  account: String;
  school: SchoolCreateOneWithoutUserInput;
  statistics?: Maybe<StatisticCreateManyWithoutUserInput>;
  createTime?: Maybe<DateTimeInput>;
}

export interface LocationUpdateWithoutSchoolsDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
}

export interface StudentCreateInput {
  id?: Maybe<ID_Input>;
  userId: String;
  schoolName: String;
  locationCode: String;
}

export interface LocationUpsertWithoutSchoolsInput {
  update: LocationUpdateWithoutSchoolsDataInput;
  create: LocationCreateWithoutSchoolsInput;
}

export interface SchoolUpsertWithoutUserInput {
  update: SchoolUpdateWithoutUserDataInput;
  create: SchoolCreateWithoutUserInput;
}

export interface SchoolUpsertNestedInput {
  update: SchoolUpdateDataInput;
  create: SchoolCreateInput;
}

export interface SchoolWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
  hasAgent_not?: Maybe<Boolean>;
  user?: Maybe<UserWhereInput>;
  location?: Maybe<LocationWhereInput>;
  AND?: Maybe<SchoolWhereInput[] | SchoolWhereInput>;
  OR?: Maybe<SchoolWhereInput[] | SchoolWhereInput>;
  NOT?: Maybe<SchoolWhereInput[] | SchoolWhereInput>;
}

export interface StatisticUpsertWithWhereUniqueWithoutUserInput {
  where: StatisticWhereUniqueInput;
  update: StatisticUpdateWithoutUserDataInput;
  create: StatisticCreateWithoutUserInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface StatisticScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  studentsNum?: Maybe<Int>;
  studentsNum_not?: Maybe<Int>;
  studentsNum_in?: Maybe<Int[] | Int>;
  studentsNum_not_in?: Maybe<Int[] | Int>;
  studentsNum_lt?: Maybe<Int>;
  studentsNum_lte?: Maybe<Int>;
  studentsNum_gt?: Maybe<Int>;
  studentsNum_gte?: Maybe<Int>;
  validNum?: Maybe<Int>;
  validNum_not?: Maybe<Int>;
  validNum_in?: Maybe<Int[] | Int>;
  validNum_not_in?: Maybe<Int[] | Int>;
  validNum_lt?: Maybe<Int>;
  validNum_lte?: Maybe<Int>;
  validNum_gt?: Maybe<Int>;
  validNum_gte?: Maybe<Int>;
  settlement?: Maybe<Boolean>;
  settlement_not?: Maybe<Boolean>;
  AND?: Maybe<StatisticScalarWhereInput[] | StatisticScalarWhereInput>;
  OR?: Maybe<StatisticScalarWhereInput[] | StatisticScalarWhereInput>;
  NOT?: Maybe<StatisticScalarWhereInput[] | StatisticScalarWhereInput>;
}

export interface UserCreateWithoutStatisticsInput {
  id?: Maybe<ID_Input>;
  name: String;
  username: String;
  password: String;
  accountType: String;
  account: String;
  school: SchoolCreateOneWithoutUserInput;
  createTime?: Maybe<DateTimeInput>;
}

export interface StatisticUpdateManyWithWhereNestedInput {
  where: StatisticScalarWhereInput;
  data: StatisticUpdateManyDataInput;
}

export interface LocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  schools_every?: Maybe<SchoolWhereInput>;
  schools_some?: Maybe<SchoolWhereInput>;
  schools_none?: Maybe<SchoolWhereInput>;
  AND?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  OR?: Maybe<LocationWhereInput[] | LocationWhereInput>;
  NOT?: Maybe<LocationWhereInput[] | LocationWhereInput>;
}

export interface StatisticUpdateManyDataInput {
  date?: Maybe<DateTimeInput>;
  studentsNum?: Maybe<Int>;
  validNum?: Maybe<Int>;
  settlement?: Maybe<Boolean>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  accountType?: Maybe<String>;
  account?: Maybe<String>;
  createTime?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutSchoolInput {
  update: UserUpdateWithoutSchoolDataInput;
  create: UserCreateWithoutSchoolInput;
}

export interface StatisticUpdateManyMutationInput {
  date?: Maybe<DateTimeInput>;
  studentsNum?: Maybe<Int>;
  validNum?: Maybe<Int>;
  settlement?: Maybe<Boolean>;
}

export interface SchoolUpsertWithWhereUniqueWithoutLocationInput {
  where: SchoolWhereUniqueInput;
  update: SchoolUpdateWithoutLocationDataInput;
  create: SchoolCreateWithoutLocationInput;
}

export interface UserUpdateWithoutStatisticsDataInput {
  name?: Maybe<String>;
  username?: Maybe<String>;
  password?: Maybe<String>;
  accountType?: Maybe<String>;
  account?: Maybe<String>;
  school?: Maybe<SchoolUpdateOneRequiredWithoutUserInput>;
  createTime?: Maybe<DateTimeInput>;
}

export interface SchoolScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
  hasAgent_not?: Maybe<Boolean>;
  AND?: Maybe<SchoolScalarWhereInput[] | SchoolScalarWhereInput>;
  OR?: Maybe<SchoolScalarWhereInput[] | SchoolScalarWhereInput>;
  NOT?: Maybe<SchoolScalarWhereInput[] | SchoolScalarWhereInput>;
}

export interface LocationCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  schools?: Maybe<SchoolCreateManyWithoutLocationInput>;
}

export interface SchoolUpdateManyMutationInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
}

export interface LocationUpdateManyMutationInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
}

export interface SchoolUpdateManyDataInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
}

export interface SchoolUpdateManyWithWhereNestedInput {
  where: SchoolScalarWhereInput;
  data: SchoolUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  accountType?: Maybe<String>;
  accountType_not?: Maybe<String>;
  accountType_in?: Maybe<String[] | String>;
  accountType_not_in?: Maybe<String[] | String>;
  accountType_lt?: Maybe<String>;
  accountType_lte?: Maybe<String>;
  accountType_gt?: Maybe<String>;
  accountType_gte?: Maybe<String>;
  accountType_contains?: Maybe<String>;
  accountType_not_contains?: Maybe<String>;
  accountType_starts_with?: Maybe<String>;
  accountType_not_starts_with?: Maybe<String>;
  accountType_ends_with?: Maybe<String>;
  accountType_not_ends_with?: Maybe<String>;
  account?: Maybe<String>;
  account_not?: Maybe<String>;
  account_in?: Maybe<String[] | String>;
  account_not_in?: Maybe<String[] | String>;
  account_lt?: Maybe<String>;
  account_lte?: Maybe<String>;
  account_gt?: Maybe<String>;
  account_gte?: Maybe<String>;
  account_contains?: Maybe<String>;
  account_not_contains?: Maybe<String>;
  account_starts_with?: Maybe<String>;
  account_not_starts_with?: Maybe<String>;
  account_ends_with?: Maybe<String>;
  account_not_ends_with?: Maybe<String>;
  school?: Maybe<SchoolWhereInput>;
  statistics_every?: Maybe<StatisticWhereInput>;
  statistics_some?: Maybe<StatisticWhereInput>;
  statistics_none?: Maybe<StatisticWhereInput>;
  createTime?: Maybe<DateTimeInput>;
  createTime_not?: Maybe<DateTimeInput>;
  createTime_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createTime_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createTime_lt?: Maybe<DateTimeInput>;
  createTime_lte?: Maybe<DateTimeInput>;
  createTime_gt?: Maybe<DateTimeInput>;
  createTime_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface SchoolCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  code: String;
  hasAgent: Boolean;
  location?: Maybe<LocationCreateOneWithoutSchoolsInput>;
}

export interface SchoolUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  code?: Maybe<String>;
  hasAgent?: Maybe<Boolean>;
  location?: Maybe<LocationUpdateOneWithoutSchoolsInput>;
}

export interface StudentUpdateManyMutationInput {
  userId?: Maybe<String>;
  schoolName?: Maybe<String>;
  locationCode?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  username: String;
  password: String;
  accountType: String;
  account: String;
  createTime?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  accountType: () => Promise<String>;
  account: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  accountType: () => Promise<AsyncIterator<String>>;
  account: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SchoolEdge {
  node: School;
  cursor: String;
}

export interface SchoolEdgePromise extends Promise<SchoolEdge>, Fragmentable {
  node: <T = SchoolPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SchoolEdgeSubscription
  extends Promise<AsyncIterator<SchoolEdge>>,
    Fragmentable {
  node: <T = SchoolSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  username: String;
  password: String;
  accountType: String;
  account: String;
  createTime?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  accountType: () => Promise<String>;
  account: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  statistics: <T = FragmentableArray<Statistic>>(args?: {
    where?: StatisticWhereInput;
    orderBy?: StatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createTime: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  accountType: () => Promise<AsyncIterator<String>>;
  account: () => Promise<AsyncIterator<String>>;
  school: <T = SchoolSubscription>() => T;
  statistics: <T = Promise<AsyncIterator<StatisticSubscription>>>(args?: {
    where?: StatisticWhereInput;
    orderBy?: StatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  accountType: () => Promise<String>;
  account: () => Promise<String>;
  school: <T = SchoolPromise>() => T;
  statistics: <T = FragmentableArray<Statistic>>(args?: {
    where?: StatisticWhereInput;
    orderBy?: StatisticOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createTime: () => Promise<DateTimeOutput>;
}

export interface SchoolConnection {
  pageInfo: PageInfo;
  edges: SchoolEdge[];
}

export interface SchoolConnectionPromise
  extends Promise<SchoolConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SchoolEdge>>() => T;
  aggregate: <T = AggregateSchoolPromise>() => T;
}

export interface SchoolConnectionSubscription
  extends Promise<AsyncIterator<SchoolConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SchoolEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSchoolSubscription>() => T;
}

export interface AggregateLocation {
  count: Int;
}

export interface AggregateLocationPromise
  extends Promise<AggregateLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface School {
  id: ID_Output;
  name: String;
  code: String;
  hasAgent: Boolean;
}

export interface SchoolPromise extends Promise<School>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  code: () => Promise<String>;
  hasAgent: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  location: <T = LocationPromise>() => T;
}

export interface SchoolSubscription
  extends Promise<AsyncIterator<School>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  hasAgent: () => Promise<AsyncIterator<Boolean>>;
  user: <T = UserSubscription>() => T;
  location: <T = LocationSubscription>() => T;
}

export interface SchoolNullablePromise
  extends Promise<School | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  code: () => Promise<String>;
  hasAgent: () => Promise<Boolean>;
  user: <T = UserPromise>() => T;
  location: <T = LocationPromise>() => T;
}

export interface LocationEdge {
  node: Location;
  cursor: String;
}

export interface LocationEdgePromise
  extends Promise<LocationEdge>,
    Fragmentable {
  node: <T = LocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdge>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Location {
  id: ID_Output;
  code: String;
  name: String;
}

export interface LocationPromise extends Promise<Location>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  schools: <T = FragmentableArray<School>>(args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<Location>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  schools: <T = Promise<AsyncIterator<SchoolSubscription>>>(args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationNullablePromise
  extends Promise<Location | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  schools: <T = FragmentableArray<School>>(args?: {
    where?: SchoolWhereInput;
    orderBy?: SchoolOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface LocationConnection {
  pageInfo: PageInfo;
  edges: LocationEdge[];
}

export interface LocationConnectionPromise
  extends Promise<LocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LocationEdge>>() => T;
  aggregate: <T = AggregateLocationPromise>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LocationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface StudentEdge {
  node: Student;
  cursor: String;
}

export interface StudentEdgePromise extends Promise<StudentEdge>, Fragmentable {
  node: <T = StudentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StudentEdgeSubscription
  extends Promise<AsyncIterator<StudentEdge>>,
    Fragmentable {
  node: <T = StudentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StudentPreviousValues {
  id: ID_Output;
  userId: String;
  schoolName: String;
  locationCode: String;
}

export interface StudentPreviousValuesPromise
  extends Promise<StudentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  schoolName: () => Promise<String>;
  locationCode: () => Promise<String>;
}

export interface StudentPreviousValuesSubscription
  extends Promise<AsyncIterator<StudentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  schoolName: () => Promise<AsyncIterator<String>>;
  locationCode: () => Promise<AsyncIterator<String>>;
}

export interface Student {
  id: ID_Output;
  userId: String;
  schoolName: String;
  locationCode: String;
}

export interface StudentPromise extends Promise<Student>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  schoolName: () => Promise<String>;
  locationCode: () => Promise<String>;
}

export interface StudentSubscription
  extends Promise<AsyncIterator<Student>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  schoolName: () => Promise<AsyncIterator<String>>;
  locationCode: () => Promise<AsyncIterator<String>>;
}

export interface StudentNullablePromise
  extends Promise<Student | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  schoolName: () => Promise<String>;
  locationCode: () => Promise<String>;
}

export interface LocationSubscriptionPayload {
  mutation: MutationType;
  node: Location;
  updatedFields: String[];
  previousValues: LocationPreviousValues;
}

export interface LocationSubscriptionPayloadPromise
  extends Promise<LocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValuesPromise>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface StatisticEdge {
  node: Statistic;
  cursor: String;
}

export interface StatisticEdgePromise
  extends Promise<StatisticEdge>,
    Fragmentable {
  node: <T = StatisticPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StatisticEdgeSubscription
  extends Promise<AsyncIterator<StatisticEdge>>,
    Fragmentable {
  node: <T = StatisticSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValues {
  id: ID_Output;
  code: String;
  name: String;
}

export interface LocationPreviousValuesPromise
  extends Promise<LocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSchool {
  count: Int;
}

export interface AggregateSchoolPromise
  extends Promise<AggregateSchool>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSchoolSubscription
  extends Promise<AsyncIterator<AggregateSchool>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StudentSubscriptionPayload {
  mutation: MutationType;
  node: Student;
  updatedFields: String[];
  previousValues: StudentPreviousValues;
}

export interface StudentSubscriptionPayloadPromise
  extends Promise<StudentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StudentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StudentPreviousValuesPromise>() => T;
}

export interface StudentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StudentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StudentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StudentPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SchoolSubscriptionPayload {
  mutation: MutationType;
  node: School;
  updatedFields: String[];
  previousValues: SchoolPreviousValues;
}

export interface SchoolSubscriptionPayloadPromise
  extends Promise<SchoolSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SchoolPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SchoolPreviousValuesPromise>() => T;
}

export interface SchoolSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SchoolSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SchoolSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SchoolPreviousValuesSubscription>() => T;
}

export interface AggregateStudent {
  count: Int;
}

export interface AggregateStudentPromise
  extends Promise<AggregateStudent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStudentSubscription
  extends Promise<AsyncIterator<AggregateStudent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateStatistic {
  count: Int;
}

export interface AggregateStatisticPromise
  extends Promise<AggregateStatistic>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStatisticSubscription
  extends Promise<AsyncIterator<AggregateStatistic>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface StatisticPreviousValues {
  id: ID_Output;
  date?: DateTimeOutput;
  studentsNum: Int;
  validNum: Int;
  settlement?: Boolean;
}

export interface StatisticPreviousValuesPromise
  extends Promise<StatisticPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  studentsNum: () => Promise<Int>;
  validNum: () => Promise<Int>;
  settlement: () => Promise<Boolean>;
}

export interface StatisticPreviousValuesSubscription
  extends Promise<AsyncIterator<StatisticPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  studentsNum: () => Promise<AsyncIterator<Int>>;
  validNum: () => Promise<AsyncIterator<Int>>;
  settlement: () => Promise<AsyncIterator<Boolean>>;
}

export interface StatisticSubscriptionPayload {
  mutation: MutationType;
  node: Statistic;
  updatedFields: String[];
  previousValues: StatisticPreviousValues;
}

export interface StatisticSubscriptionPayloadPromise
  extends Promise<StatisticSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StatisticPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StatisticPreviousValuesPromise>() => T;
}

export interface StatisticSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StatisticSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StatisticSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StatisticPreviousValuesSubscription>() => T;
}

export interface Statistic {
  id: ID_Output;
  date?: DateTimeOutput;
  studentsNum: Int;
  validNum: Int;
  settlement?: Boolean;
}

export interface StatisticPromise extends Promise<Statistic>, Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  school: <T = SchoolPromise>() => T;
  studentsNum: () => Promise<Int>;
  validNum: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  settlement: () => Promise<Boolean>;
}

export interface StatisticSubscription
  extends Promise<AsyncIterator<Statistic>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  school: <T = SchoolSubscription>() => T;
  studentsNum: () => Promise<AsyncIterator<Int>>;
  validNum: () => Promise<AsyncIterator<Int>>;
  user: <T = UserSubscription>() => T;
  settlement: () => Promise<AsyncIterator<Boolean>>;
}

export interface StatisticNullablePromise
  extends Promise<Statistic | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  date: () => Promise<DateTimeOutput>;
  school: <T = SchoolPromise>() => T;
  studentsNum: () => Promise<Int>;
  validNum: () => Promise<Int>;
  user: <T = UserPromise>() => T;
  settlement: () => Promise<Boolean>;
}

export interface SchoolPreviousValues {
  id: ID_Output;
  name: String;
  code: String;
  hasAgent: Boolean;
}

export interface SchoolPreviousValuesPromise
  extends Promise<SchoolPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  code: () => Promise<String>;
  hasAgent: () => Promise<Boolean>;
}

export interface SchoolPreviousValuesSubscription
  extends Promise<AsyncIterator<SchoolPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  code: () => Promise<AsyncIterator<String>>;
  hasAgent: () => Promise<AsyncIterator<Boolean>>;
}

export interface StatisticConnection {
  pageInfo: PageInfo;
  edges: StatisticEdge[];
}

export interface StatisticConnectionPromise
  extends Promise<StatisticConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StatisticEdge>>() => T;
  aggregate: <T = AggregateStatisticPromise>() => T;
}

export interface StatisticConnectionSubscription
  extends Promise<AsyncIterator<StatisticConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StatisticEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStatisticSubscription>() => T;
}

export interface StudentConnection {
  pageInfo: PageInfo;
  edges: StudentEdge[];
}

export interface StudentConnectionPromise
  extends Promise<StudentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StudentEdge>>() => T;
  aggregate: <T = AggregateStudentPromise>() => T;
}

export interface StudentConnectionSubscription
  extends Promise<AsyncIterator<StudentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StudentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStudentSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Location",
    embedded: false
  },
  {
    name: "Statistic",
    embedded: false
  },
  {
    name: "Student",
    embedded: false
  },
  {
    name: "School",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
